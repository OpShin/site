{"/":{"title":"A pythonic smart contract toolchain for Cardano","data":{"":"Build without limits\n\n\nmonitor-shimmer\nPlayground\n\n‚ùØ_ Set up locally\n\n\n\n\n\n\nA pythonic programming language\n\n\n100% valid Python 3\n\nStrong static typing with inference\n\nCustom types, recursion, imports...\n\nUnittests, property based tests, formal verification...\n\n\n\n\n\n\n\n\n\n\nLeverage the Python ecosystem!\n\n\nZero configuration, one single capable tool\n\nQuick and friendly feedback with helpful error diagnotics\n\nSupported by basically every IDE\n\nSyntax Highlighting, linting, static analysis...\n\nDeeply integrated with PyCardano for transaction building\n\n\n\n\n\n\n\n\n\n\nA toolkit for working with Plutus\n\n\nProduce highly efficient code\n\nOptimize code for size and efficiency\n\nDisassemble and parameterize code\n\nInteracts with python off-chain toolchains natively\n\n\n\n\n\n\n\n\n\n\nA truly open source ecosystem\n\n\nWritten in Python3, licensed under MIT License\n\nFully documented with end-to-end examples\n\nFull example can be run in your browser\n\nFollowing along the Plutus Pioneer Program\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nJoin the Discord\n\n\n\n\n\n\n\nFAQ\n\n\nWhat is OpShin?\n\nOpShin is a new programming language and toolchain for developing\nsmart contracts on the Cardano blockchain. It is focusing on accessability and\ndeveloper experience.\n\nOpShin is 100% valid Python 3. In this way it can seamlessly integrate\nwith off-chain tools built in Python such as PyCardano.\nIt can also leverage the existing testing frameworks and IDEs\nand allows developers to re-use knowledge or focus on attaining\nknowledge about a simple and general purpose language.\n\n\n\nWhy build another smart contract platform?\n\nHaskell is hard and almost no developer is used to it.\nOn the other hand, Python is praised for its simplicity and\nused in almost 25% of all projects on the internet (compare that to roughly 0.65% for Haskell).\nSo the ecosystem for Python is huge and full of interesting tools\nthat leverage the developer experience.\nThe platform based on python can leverage these tools\nto provide a safe and enjoyable developer experience.\n\n\n\nI thought Cardano smart contracts had to be written in Haskell?\n\nThis is a common misconception. The current Cardano node implementation\ndoes indeed happen to be written in Haskell. The virtual machine for\nexecuting smart contracts that comes baked into the node is also\nimplemented in Haskell. But that does not mean that it is Haskell which\nis executed by the smart contract virtual machine.\n\nThe virtual machine is a language interpreter which executes a\nsmart contract language called 'Untyped Plutus Core' (abbrev.\nUPLC) often referred to simply as 'Plutus'.\n\nYet UPLC isn't something developers are expected to write by hand.\nInstead, it is a compilation target (like WebAssembly for the world wide\nweb). Oddly enough, until recently, the only established framework that\nproduced UPLC from a high-level syntax was called 'Plutus-Tx' and\nhappened to be a Haskell framework.\n\nOpShin changes the game by introducing a new framework that compiles\nstraight to UPLC.\n\n\n\nCan I write off-chain/backend code with OpShin?\n\nNo, but you can use the off-chain library PyCardano\nwith which OpShin is closely integrated!\n\n\n\nIs Python the right language for smart contracts? It's not even type safe right?\n\nWe chose Python because it is simple and intuitive.\nThis is a great basis to improve security of contracts -\nif they are easy to read and understand, a larger group of people can interpret them.To combat the problems that come with dynamically typed languages,\nOpShin enforces a strict type system on top of Python, similar to the Haskell type system.\nHence, you enjoy the simplicy of Python programming and the safety of properly typed code."}}}